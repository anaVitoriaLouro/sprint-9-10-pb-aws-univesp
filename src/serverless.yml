service: bot-alfabet
frameworkVersion: "3"

custom:
  tablePhrases: "phrases-table-${sls:stage}"
  dynamodb:
    start:
      migrate: true
      stages:
        - ${sls:stage}

provider:
  name: aws
  runtime: python3.9
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - Fn::GetAtt: [PhrasesTable, Arn]
        - Effect: Allow
          Action:
            - polly:*
            - s3:*
            - transcribe:*
            - rekognition:*
          Resource:
            - "*"

  environment:
    PHRASES_TABLE: ${self:custom.tablePhrases}

functions:
  DynamoManager:
    handler: services/dynamo_function.get_phrase
    events:
      - httpApi:
          path: /dynamo
          method: post
  PollySpeech:
    handler: services/polly_function.put_speech
    events:
      - httpApi:
          path: /polly
          method: post
  Orchestrator:
    handler: orchestrator_lambda.lambda_handler
    events:
      - httpApi:
          path: /orchestrator
          method: post
  ReadImage:
    handler: services/rekognition_function.read_image
    events:
      - s3:
          bucket: imagens-sprint-9-10
          event: s3:ObjectCreated:*
          rules:
            - suffix: .jpg
          existing: true

resources:
  Resources:
    PhrasesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tablePhrases}

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: imagens-sprint-9-10
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter

plugins:
  - serverless-offline
  - serverless-dynamodb-local
